import unittest
import tempfile
import shutil
import os

TEST_DATA = "data/invest-test-data/coastal_vulnerability"
TEST_WORKSPACE_DIR = "../invest_dev/coastal_vulnerability/test_workspace"
_SMALLEST_FEATURE_SIZE = 10000
_MAX_FETCH_DISTANCE = 60000

class CoastalVulnerabilityTests(unittest.TestCase):
    """Tests for the Coastal Vulnerability Model."""

    def setUp(self):
        """Overriding setUp function to create temp workspace directory."""
        # this lets us delete the workspace after its done no matter the
        # the rest result
        self.workspace_dir = tempfile.mkdtemp()

    def tearDown(self):
        """Overriding tearDown function to remove temporary directory."""
        shutil.rmtree(self.workspace_dir)

    @unittest.skip("skip shore points")
    def test_shore_points(self):
        from natcap.invest import coastal_vulnerability

        working_dir = os.path.join(TEST_WORKSPACE_DIR, "shore_points")
        wwiii_vector_path = os.path.join(TEST_DATA, "WaveWatchIII_subset.shp")
        wwiii_rtree_path = os.path.join(working_dir, "wwiii_rtree.dat")
        landmass_vector_path = os.path.join(
            TEST_DATA, "land_polygon_simple_utm.shp")
        target_shore_point_vector_path = os.path.join(
            working_dir, "shore_points.shp")

        if os.path.exists(working_dir):
            shutil.rmtree(working_dir)
        os.makedirs(working_dir)

        coastal_vulnerability.build_wwiii_rtree(
            wwiii_vector_path, wwiii_rtree_path)

        coastal_vulnerability.create_shore_points(
            landmass_vector_path, wwiii_vector_path, wwiii_rtree_path,
            _SMALLEST_FEATURE_SIZE, working_dir, target_shore_point_vector_path)

    @unittest.skip("skip wind and ray")
    def test_wind_exposure_and_ray_fetch(self):
        from natcap.invest import coastal_vulnerability

        working_dir = os.path.join(TEST_WORKSPACE_DIR, "wind")
        base_shore_point_vector_path = os.path.join(
            TEST_DATA, "shore_points_utm.shp")
        landmass_vector_path = os.path.join(
            TEST_DATA, "land_polygon_simple_utm.shp")
        landmass_rtree_path = os.path.join(working_dir, "land_rtree.dat")
        target_fetch_point_vector_path = os.path.join(
            working_dir, "fetch_points.gpkg")

        if os.path.exists(working_dir):
            shutil.rmtree(working_dir)
        os.makedirs(working_dir)

        coastal_vulnerability.build_feature_bounding_box_rtree(
            landmass_vector_path, landmass_rtree_path)

        coastal_vulnerability.calculate_wind_exposure(
            base_shore_point_vector_path,
            landmass_rtree_path, landmass_vector_path, working_dir,
            _SMALLEST_FEATURE_SIZE, _MAX_FETCH_DISTANCE,
            target_fetch_point_vector_path)

    def test_complete_run(self):
        from natcap.invest import coastal_vulnerability

        args = {'workspace_dir': 'C:/Users/dmf/projects/invest_dev/coastal_vulnerability/test_workspace',
                'n_workers': -1,
                'wwiii': os.path.join(TEST_DATA, 'WaveWatchIII_subset.shp'),
                'landmass_vector_path': os.path.join(TEST_DATA, 'land_polygon_simple_utm.shp'),
                'aoi_vector_path': os.path.join(TEST_DATA, 'AOI_BarkClay.shp'),
                'smallest_feature_size': 10000,
                'max_fetch_distance': 60000,
                }

        coastal_vulnerability.execute(args)

"""Module for Regression Testing the InVEST Coastal Vulnerability module."""
import unittest
import tempfile
import shutil
import os
import pickle
import numpy

import pygeoprocessing.testing

REGRESSION_DATA = os.path.join(
    os.path.dirname(__file__), '..', 'data', 'invest-test-data',
    'coastal_vulnerability')
INPUT_DATA = os.path.join(
    os.path.dirname(__file__), '..', 'data', 'invest-test-data',
    'coastal_vulnerability', 'input')
TEST_WORKSPACE_DIR = "../invest_dev/coastal_vulnerability/test_workspace"
_SMALLEST_FEATURE_SIZE = 10000
_MAX_FETCH_DISTANCE = 60000

class CoastalVulnerabilityTests(unittest.TestCase):
    """Tests for the Coastal Vulnerability Model."""

    def setUp(self):
        """Overriding setUp function to create temp workspace directory."""
        # this lets us delete the workspace after its done no matter the
        # the rest result
        self.workspace_dir = tempfile.mkdtemp()

    def tearDown(self):
        """Overriding tearDown function to remove temporary directory."""
        shutil.rmtree(self.workspace_dir)

    @unittest.skip("skip shore points")
    def test_shore_points(self):
        from natcap.invest import coastal_vulnerability

        # workspace_dir = self.workspace_dir
        workspace_dir = os.path.join(TEST_WORKSPACE_DIR, "shore_points")
        aoi_vector_path = os.path.join(INPUT_DATA, 'AOI_BarkClay.shp')
        landmass_vector_path = os.path.join(
            INPUT_DATA, "land_polygon_simple_utm.shp")
        target_shore_point_vector_path = os.path.join(
            workspace_dir, "shore_points.gpkg")
        smallest_feature_size = 2500
        file_suffix = None

        coastal_vulnerability.create_shore_points(
            aoi_vector_path, landmass_vector_path,
            smallest_feature_size, workspace_dir, file_suffix,
            target_shore_point_vector_path)

    @unittest.skip("skip wind and ray")
    def test_wind_exposure_and_ray_fetch(self):
        from natcap.invest import coastal_vulnerability

        # workspace_dir = self.workspace_dir
        workspace_dir = os.path.join(TEST_WORKSPACE_DIR, "wind")
        base_shore_point_vector_path = os.path.join(
            REGRESSION_DATA, "shore_points_utm.shp")
        landmass_vector_path = os.path.join(
            REGRESSION_DATA, "land_polygon_simple_utm.shp")
        landmass_rtree_path = os.path.join(
            workspace_dir, "land_rtree.dat")
        target_fetch_point_vector_path = os.path.join(
            workspace_dir, "fetch_points.gpkg")
        file_suffix = None

        coastal_vulnerability.build_feature_bounding_box_rtree(
            landmass_vector_path, landmass_rtree_path)

        coastal_vulnerability.calculate_wind_exposure(
            base_shore_point_vector_path,
            landmass_rtree_path, landmass_vector_path, workspace_dir,
            file_suffix, _SMALLEST_FEATURE_SIZE, _MAX_FETCH_DISTANCE,
            target_fetch_point_vector_path)

    @unittest.skip("skip habitat")
    def test_habitat_rank(self):
        from natcap.invest import coastal_vulnerability

        # workspace_dir = self.workspace_dir
        workspace_dir = os.path.join(TEST_WORKSPACE_DIR, 'habitat_dir')
        base_shore_point_vector_path = os.path.join(
            INPUT_DATA, "shore_points.shp")
        habitat_table_path = os.path.join(
            INPUT_DATA, "natural_habitats_wcvi.csv")
        target_habitat_protection_path = os.path.join(
            workspace_dir, 'habitat_protection.csv')
        file_suffix = None

        coastal_vulnerability.calculate_habitat_protection(
            base_shore_point_vector_path,
            habitat_table_path, workspace_dir, file_suffix,
            target_habitat_protection_path)

    # @unittest.skip("skip geomorphology")
    def test_geomorphology_rank(self):
        from natcap.invest import coastal_vulnerability

        # workspace_dir = self.workspace_dir
        workspace_dir = os.path.join(TEST_WORKSPACE_DIR, 'geomorphology')
        geomorphology_vector_path = os.path.join(INPUT_DATA,
            "geomorphology_few_ranks.shp")
        grid_raster_path = os.path.join(INPUT_DATA, "grid_utm.tif")
        target_geomorphology_raster_path = os.path.join(
            workspace_dir, 'final_geomorphology_rank.tif')
        base_shore_point_vector_path = os.path.join(
            INPUT_DATA, "shore_points.shp")
        target_pickle_path = os.path.join(
            workspace_dir, 'geomorphology.pickle')
        file_suffix = None

        coastal_vulnerability.calculate_geomorphology_exposure(
            geomorphology_vector_path, 3,
            grid_raster_path, workspace_dir, file_suffix,
            target_geomorphology_raster_path,
            base_shore_point_vector_path,
            target_pickle_path)

        target_raw_values_path = os.path.join(
            workspace_dir, 'geomorphology.pickle')
        with open(target_raw_values_path, 'rb') as pickle_file:
            actual_values_dict = pickle.load(pickle_file)
        actual_values = actual_values_dict.values()

        expected_raw_values_path = os.path.join(
            REGRESSION_DATA, 'expected_geomorphology.pickle')
        with open(expected_raw_values_path, 'rb') as pickle_file:
            expected_values_dict = pickle.load(pickle_file)
        expected_values = expected_values_dict.values()

        numpy.testing.assert_array_equal(actual_values, expected_values)

    @unittest.skip("skip surge")
    def test_surge_exposure_rank(self):
        from natcap.invest import coastal_vulnerability

        base_shore_point_vector_path = os.path.join(
            INPUT_DATA, "shore_points.shp")    
        shelf_contour_path = os.path.join(
            INPUT_DATA, 'continental_shelf_contour.gpkg')
        aoi_vector_path = os.path.join(INPUT_DATA, 'AOI_BarkClay.shp')

        workspace_dir = os.path.join(TEST_WORKSPACE_DIR, 'surge')
        target_surge_pickle_path = os.path.join(workspace_dir, 'surge.pickle')

        coastal_vulnerability.calculate_surge_exposure_shelf(
            base_shore_point_vector_path, shelf_contour_path, aoi_vector_path,
            target_surge_pickle_path)


    # @unittest.skip("skip relief")
    def test_relief_values(self):
        from natcap.invest import coastal_vulnerability

        base_shore_point_vector_path = os.path.join(INPUT_DATA, "shore_points_2500m.gpkg")
        global_dem_path = os.path.join(
            "C:/Users/dmf/projects/invest-sample-data/Base_Data/Marine/DEMs/global_dem/", "hdr.adf")
        workspace_dir = os.path.join(TEST_WORKSPACE_DIR, 'relief')
        target_relief_pickle_path = os.path.join(workspace_dir, 'relief.pickle')
        smallest_feature_size = 2500
        dem_averaging_radius = 10000.0
        file_suffix = None

        coastal_vulnerability.calculate_relief_exposure(
            base_shore_point_vector_path, global_dem_path, dem_averaging_radius,
            smallest_feature_size, workspace_dir, file_suffix,
            target_relief_pickle_path)
        
        target_raw_values_path = os.path.join(workspace_dir, 'relief.pickle')
        with open(target_raw_values_path, 'rb') as pickle_file:
            actual_values_dict = pickle.load(pickle_file)
        actual_values = actual_values_dict.values()
        
        expected_raw_values_path = os.path.join(
            REGRESSION_DATA, 'expected_relief_values.pickle')
        with open(expected_raw_values_path, 'rb') as pickle_file:
            expected_values_dict = pickle.load(pickle_file)
        expected_values = expected_values_dict.values()

        numpy.testing.assert_array_almost_equal(actual_values, expected_values)



    # @unittest.skip("skip complete run")
    def test_complete_run(self):
        from natcap.invest import coastal_vulnerability

        args = {'workspace_dir': 'C:/Users/dmf/projects/invest_dev/coastal_vulnerability/test_workspace/complete_run',
                'n_workers': -1,
                'wwiii_vector_path': os.path.join(INPUT_DATA, 'WaveWatchIII_subset.shp'),
                'landmass_vector_path': os.path.join(INPUT_DATA, 'land_polygon_simple_utm.shp'),
                'aoi_vector_path': os.path.join(INPUT_DATA, 'AOI_BarkClay.shp'),
                'model_resolution': 8000,
                'max_fetch_distance': 60000,
                'dem_path': "C:/Users/dmf/projects/invest-sample-data/Base_Data/Marine/DEMs/global_dem/hdr.adf",
                'dem_averaging_radius': 8000.0,
                'habitat_table_path': os.path.join(INPUT_DATA, "natural_habitats_wcvi.csv"),
                'geomorphology_vector_path': os.path.join(
                    "C:/Users/dmf/projects/invest-sample-data/CoastalProtection/Input", "Geomorphology_BarkClay.shp"),
                'geomorphology_fill_value': 3,
                'shelf_contour_vector_path': os.path.join(
                    INPUT_DATA, 'continental_shelf_contour.gpkg'),
                'population_raster_path': os.path.join(
                    "C:/Users/dmf/projects/invest_dev/coastal_vulnerability/masked_global_pop_v2.tif"),
                'population_radius': 16000,
                }

        coastal_vulnerability.execute(args)

        pygeoprocessing.testing.assert_vectors_equal(
            os.path.join(args['workspace_dir'], 'coastal_exposure.gpkg'),
            os.path.join(REGRESSION_DATA, 'expected_coastal_exposure.gpkg'),
            1e-6)


    # def test_bin_values_to_percentiles(self):


    # def test_validate(self):

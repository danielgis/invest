# Adapted from https://packaging.python.org/guides/supporting-windows-using-appveyor/

skip_non_tags: false  # we want to build untagged revisions.

image: "Visual Studio 2019"  # using this version because it has docker preloaded.

version: "{branch}.{build}"  # Makes build version information more readable on appveyor

environment:
  PIP_EXTRA_INDEX_URL: "http://pypi.naturalcapitalproject.org/simple/"
  PIP_TRUSTED_HOST: "pypi.naturalcapitalproject.org"
  PIP_PREFER_BINARY: 1
  PIP_INSTALL: "pip install"

  matrix:
    - PYTHON: "C:\\Python36"
      EXTRAPKGS: "pyqt4"

install:
    - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
    - "python --version"
    # We need wheel installed to build wheels and numpy needs to be installed before pygeoprocessing.
    - "python -m pip install wheel numpy %EXTRAPKGS%"
    - "python -m pip install -r requirements.txt -r requirements-dev.txt -r requirements-gui.txt"
    - "python setup.py sdist bdist_wheel"

    # Need to install with -I because pip thinks that cwd is a valid installation directory.
    # It's not (in our case).  Adding --no-deps because that's what all of the above
    # with pipwin and pip is for.
    - "python -m pip install -I --no-deps natcap.invest --find-links dist"
    - "choco install make wget"

    # Our Makefile depends on zip rather than 7zip, so we need to get those binaries.
    - choco install zip

    # The binary build requires the shapely DLL to be named something specific.
    # /B copies the file as a binary file.
    - copy /B %PYTHON%\Lib\site-packages\shapely\DLLs\geos_c.dll %PYTHON%\Lib\site-packages\shapely\DLLs\geos.dll

    # Download and install NSIS plugins to their correct places.
    - wget -nv https://storage.googleapis.com/natcap-build-dependencies/windows/Inetc.zip
    - wget -nv https://storage.googleapis.com/natcap-build-dependencies/windows/Nsisunz.zip
    - wget -nv https://storage.googleapis.com/natcap-build-dependencies/windows/NsProcess.zip
    - 7z e NsProcess.zip -o"C:\Program Files (x86)\NSIS\Plugins\x86-ansi" Plugin\nsProcess.dll
    - 7z e NsProcess.zip -o"C:\Program Files (x86)\NSIS\Include" Include\nsProcess.nsh
    - 7z e Inetc.zip -o"C:\Program Files (x86)\NSIS\Plugins\x86-ansi\INetC.dll" Plugins\x86-ansi\INetC.dll
    - 7z e Nsisunz.zip -o"C:\Program Files (x86)\NSIS\Plugins\x86-ansi\nsisunz.dll" nsisunz\Release\nsisunz.dll

build: off
test_script: off

build_script:
    # Attempt to download repositories in parallel
    - make -j3 fetch

    # Attempt to zip things up in parallel
    - make -j3 sampledata

    # Build the Windows installer, binaries.
    # Python packages were already built in the ``install`` step.
    - make windows_installer

    # TODO: sign the installer
    # TODO: push the artifacts

artifacts:
    # bdist_wheel puts your built wheel in the dist directory
    - path: dist\*

# Cache-related items adapted from pyinstaller appveyor configuration.
# https://github.com/pyinstaller/pyinstaller/blob/develop/appveyor.yml
cache:
  # Cache downloaded pip packages and built wheels.
  - '%LOCALAPPDATA%\pip\Cache\http'
  - '%LOCALAPPDATA%\pip\Cache\wheels'
  - '%HOMEPATH%\pipwin'

on_finish:
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

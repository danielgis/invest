# Adapted from https://packaging.python.org/guides/supporting-windows-using-appveyor/

skip_non_tags: false  # we want to build untagged revisions.

image: "Visual Studio 2019"  # using this version because it has docker preloaded.

version: "{branch}.{build}"  # Makes build version information more readable on appveyor

environment:
  PIP_EXTRA_INDEX_URL: "http://pypi.naturalcapitalproject.org/simple/"
  PIP_TRUSTED_HOST: "pypi.naturalcapitalproject.org"
  PIP_PREFER_BINARY: 1
  PIP_INSTALL: "pip install"
  PYTHON: "C:\\Python36"
  EXTRAPKGS: "pyside2"

install:
    - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
    - "python --version"
    # We need wheel installed to build wheels and numpy needs to be installed before pygeoprocessing.
    - "python -m pip install wheel numpy %EXTRAPKGS%"
    - "python -m pip install -r requirements.txt -r requirements-dev.txt -r requirements-gui.txt"
    - "python setup.py sdist bdist_wheel"

    # Need to install with -I because pip thinks that cwd is a valid installation directory.
    # It's not (in our case).  Adding --no-deps because that's what all of the above
    # with pipwin and pip is for.
    - "python -m pip install -I --no-deps natcap.invest --find-links dist"
    - "choco install make wget vcredist140 pandoc"

    # Our Makefile depends on zip rather than 7zip, so we need to get those binaries.
    - choco install zip

    # The binary build requires the shapely DLL to be named something specific.
    # /B copies the file as a binary file.
    - copy /B %PYTHON%\Lib\site-packages\shapely\DLLs\geos_c.dll %PYTHON%\Lib\site-packages\shapely\DLLs\geos.dll

    # Download and install NSIS plugins to their correct places.
    - wget -nv https://storage.googleapis.com/natcap-build-dependencies/windows/Inetc.zip
    - wget -nv https://storage.googleapis.com/natcap-build-dependencies/windows/Nsisunz.zip
    - wget -nv https://storage.googleapis.com/natcap-build-dependencies/windows/NsProcess.zip
    - 7z e NsProcess.zip -o"C:\Program Files (x86)\NSIS\Plugins\x86-ansi" Plugin\nsProcess.dll
    - 7z e NsProcess.zip -o"C:\Program Files (x86)\NSIS\Include" Include\nsProcess.nsh
    - 7z e Inetc.zip -o"C:\Program Files (x86)\NSIS\Plugins\x86-ansi" Plugins\x86-ansi\INetC.dll
    - 7z e Nsisunz.zip -o"C:\Program Files (x86)\NSIS\Plugins\x86-ansi" nsisunz\Release\nsisunz.dll

    # Download, quietly unzip and install the google cloud utilities.
    - curl -o gcloud.zip https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-261.0.0-windows-x86_64-bundled-python.zip
    - unzip -q gcloud.zip

    # GCloud service account key conversion from base64 taken from https://stackoverflow.com/a/56140959/299084
    # Assumes that GOOGLE_SERVICE_ACC_KEY is a base64-encoded JSON service account key.
    - ps: "$content = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:GOOGLE_SERVICE_ACC_KEY))"
    - ps: "$Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False"
    - ps: "[System.IO.File]::WriteAllLines('C:/Users/appveyor/client-secret.json', $content, $Utf8NoBomEncoding)"
    - .\google-cloud-sdk\bin\gcloud auth activate-service-account --key-file=%USERPROFILE%\client-secret.json

build_script:
    # Attempt to download repositories in parallel
    - make -j3 fetch

    # Build the Windows installer, binaries.
    # Attempt to zip things up in parallel
    # Python packages were already built in the ``install`` step.
    - make -j3 sampledata windows_installer

    # figure out the path to signtool.exe (it keeps changing with SDK updates)
    - ps: $env:SIGNTOOL_PATH = @(Get-ChildItem -Path 'C:\Program Files (x86)\\Windows Kits\\10' -Include 'signtool.exe' -File -Recurse -ErrorAction SilentlyContinue)[0] | Select-Object -ExpandProperty FullName

    # get the path to the installer and sign it.
    - ps: $env:INSTALLER_BINARY = @(gci 'dist/*.exe')[0] | Select-Object -ExpandProperty FullName

    # gsutil writes its output to stderr, which is treated as an error in appveyor.
    # https://help.appveyor.com/discussions/problems/5413-calling-external-executable-causes-nativecommanderror-despite-no-apparent-error
    - make GSUTIL=.\google-cloud-sdk\bin\gsutil CERT_KEY_PASS=%STANFORD_CERT_KEY_PASS% BIN_TO_SIGN="%INSTALLER_BINARY%" SIGNTOOL="%SIGNTOOL_PATH%" signcode_windows

    # push the artifacts
    - make GSUTIL=.\google-cloud-sdk\bin\gsutil deploy

test_script:
    - echo "This is a binary build only; nothing to test at the moment."

artifacts:
    # bdist_wheel puts your built wheel in the dist directory
    - path: dist\*

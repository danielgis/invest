"""InVEST Coastal Vulnerability"""
import sys
import traceback
import shutil
import time
import os
import math
import logging
import re
import multiprocessing
import zipfile

import numpy
from osgeo import gdal
from osgeo import osr
from osgeo import ogr
import rtree
import shapely
import shapely.wkb
import shapely.ops
import shapely.speedups
import pygeoprocessing
import taskgraph

from . import utils

LOGGER = logging.getLogger(__name__)

# Wave Watch III data does not cover the planet.  Make sure we don't deal
# with a point that's not in range of said point.  I'm picking 1 degree since
# that's double the diagonal distance between two WWIII points
_MAX_WWIII_DISTANCE = 5.0 # RICH: did you later decide 5 degree is better choice than 1?
_N_FETCH_RAYS = 16


# Create shore points within an AOI 
# Clip the landmass vector path by an AOI
# Could pass AOI to create_shore_points and clip landmass (w/ landmass_rtree)
# Or could clip landmass ahead of time and pass clipped landmass to create_shore_points


# just pass aoi vector to create shore points, for create_raster_from_vector_extents
# then rasterize landmass onto that raster. still need to make sure landmass
# is projected to AOI. Then, wind exposure needs a landmass in AOI projection 
# with a buffer of max-fetch-dist. 

def execute(args):
    """
    
    Parameters:
        workspace_dir (string):
        n_workers:
        wwiii:
        landmass_vector_path:
        aoi_vector_path:
        smallest_feature_size:
        max_fetch_distance:


    """

    output_dir = os.path.join(args['workspace_dir'])
    intermediate_dir = os.path.join(
        args['workspace_dir'], 'intermediate')

    utils.make_directories(
        [output_dir, intermediate_dir])

    work_token_dir = os.path.join(intermediate_dir, '_tmp_work_tokens')
    try:
        n_workers = int(args['n_workers'])
    except (KeyError, ValueError, TypeError):
        # KeyError when n_workers is not present in args
        # ValueError when n_workers is an empty string.
        # TypeError when n_workers is None.
        n_workers = -1  # Single process mode.
    task_graph = taskgraph.TaskGraph(work_token_dir, n_workers)

    # TODO: reproject global inputs (wwiii, global landmass) to AOI SRS, 
    # Before building rtree?
    # Or, build rtrees for global data, then reproject AOI to match,
    # AOI should be small/simple.
    # - wwiii: I project points to match wwiii, for finding nearest.
    # - landmass: project aoi to landmass, clip landmass, then prj land to aoi
    # - relief/bathy: 
    # - continental shelf: 

    wwiii_rtree_path = os.path.join(intermediate_dir, 'wwiii_rtree.dat')
    build_wwiii_rtree_task = task_graph.add_task(
        func=build_wwiii_rtree,
        args=(args['wwiii'], wwiii_rtree_path),
        target_path_list=[wwiii_rtree_path],
        task_name='build_wwiii_rtree')

    landmass_rtree_path = os.path.join(intermediate_dir, 'landmass_rtree.dat')
    build_landmass_rtree_task = task_graph.add_task(
        func=build_feature_bounding_box_rtree,
        args=(args['landmass_vector_path'], landmass_rtree_path),
        target_path_list=[landmass_rtree_path],
        task_name='build_landmass_rtree')

    clipped_landmass_path = os.path.join(
        intermediate_dir, 'clipped_landmass.gpkg')
    clip_landmass_to_aoi_task = task_graph.add_task(
        func=clip_reproject_landmass_to_aoi,
        args=(args['aoi_vector_path'], args['landmass_vector_path'],
              landmass_rtree_path, args['max_fetch_distance'],
              args['smallest_feature_size'], clipped_landmass_path),
        target_path_list=[clipped_landmass_path],
        dependent_task_list=[build_landmass_rtree_task],
        task_name='clip landmass to aoi')

    shore_point_vector_path = os.path.join(
        intermediate_dir, 'shore_points.shp')
    create_shore_points_task = task_graph.add_task(
        func=create_shore_points,
        args=(args['aoi_vector_path'], clipped_landmass_path, args['wwiii'],
              wwiii_rtree_path, args['smallest_feature_size'], intermediate_dir,
              shore_point_vector_path),
        target_path_list=[shore_point_vector_path],
        dependent_task_list=[clip_landmass_to_aoi_task, build_wwiii_rtree_task],
        task_name='create shore points')

    fetch_point_vector_path = os.path.join(
        intermediate_dir, 'fetch_points.gpkg')
    calculate_wind_exposure_task = task_graph.add_task(
        func=calculate_wind_exposure,
        args=(shore_point_vector_path, landmass_rtree_path,
              args['landmass_vector_path'], intermediate_dir,
              args['smallest_feature_size'],
              args['max_fetch_distance'], fetch_point_vector_path),
        target_path_list=[fetch_point_vector_path],
        dependent_task_list=[create_shore_points_task],
        task_name='calculate_wind_exposure')

    task_graph.close()
    task_graph.join()


def clip_reproject_landmass_to_aoi(
        aoi_vector_path, landmass_vector_path, landmass_rtree_path,
        max_fetch_distance, smallest_feature_size,
        target_clipped_landmass_path):
    """Clip landmass polygon to AOI.

    # TODO: generalize this function so it just clips to a bbox that is passed in?
    """

    landmass_vector_rtree = rtree.index.Index(
        os.path.splitext(landmass_rtree_path)[0])
    landmass_spatial_reference = osr.SpatialReference()
    landmass_srs_wkt = pygeoprocessing.get_vector_info(
        landmass_vector_path)['projection']
    landmass_spatial_reference.ImportFromWkt(landmass_srs_wkt)
    landmass_vector = gdal.OpenEx(landmass_vector_path, gdal.OF_VECTOR)
    landmass_layer = landmass_vector.GetLayer()

    aoi_vector_info = pygeoprocessing.get_vector_info(
        aoi_vector_path)
    aoi_bounding_box = aoi_vector_info['bounding_box']
    # add the max_fetch_distance to the bounding box so we can use
    # this clipped landmass in the ray casting routine.
    fetch_buffer = max_fetch_distance + smallest_feature_size
    aoi_bounding_box[0] -= fetch_buffer
    aoi_bounding_box[1] -= fetch_buffer
    aoi_bounding_box[2] += fetch_buffer
    aoi_bounding_box[3] += fetch_buffer

    aoi_clipping_box = pygeoprocessing.transform_bounding_box(
        aoi_bounding_box, aoi_vector_info['projection'],
        landmass_srs_wkt, edge_samples=11)
    aoi_clipping_shapely = shapely.geometry.box(*aoi_clipping_box)
    # import pdb; pdb.set_trace()
    gpkg_driver = gdal.GetDriverByName('GPKG')
    clipped_vector = gpkg_driver.Create(
        target_clipped_landmass_path, 0, 0, 0, gdal.GDT_Unknown)
    clipped_layer = clipped_vector.CreateLayer(
        os.path.splitext(os.path.basename(target_clipped_landmass_path))[0],
        landmass_spatial_reference, ogr.wkbPolygon)
    clipped_defn = clipped_layer.GetLayerDefn()

    for feature_id in landmass_vector_rtree.intersection(
            aoi_clipping_box):
        try:
            landmass_feature = landmass_layer.GetFeature(feature_id)
            landmass_shapely = shapely.wkb.loads(
                landmass_feature.GetGeometryRef().ExportToWkb())
            intersection_shapely = aoi_clipping_shapely.intersection(
                landmass_shapely)
            clipped_geometry = ogr.CreateGeometryFromWkt(
                intersection_shapely.wkt)
            clipped_feature = ogr.Feature(clipped_defn)
            clipped_feature.SetGeometry(clipped_geometry)
            clipped_layer.CreateFeature(clipped_feature)
            clipped_feature = None
        except Exception:
            clipped_feature = None
            LOGGER.warn(
                "Couldn't process this intersection %s",
                intersection_shapely)
    clipped_layer.SyncToDisk()
    clipped_layer = None
    clipped_vector = None

def create_shore_points(
        aoi_vector_path,
        landmass_vector_path, wwiii_vector_path, wwiii_rtree_path,
        smallest_feature_size,
        workspace_dir, target_shore_point_vector_path):
    """Create points that lie on the coast line of the landmass.

    Also join tabular data from Wave Watch 3 to shore points by finding the
    nearest WW3 points to each shore point.

    Parameters:
        landmass_vector_path (string): path to polygon vector representing
            landmass.
        wwiii_vector_path (string): path to point shapefile representing
            the Wave Watch III data.
        wwiii_rtree_path (string): path to an rtree index that has
            the points of `wwiii_vector_path` indexed.
        smallest_feature_size (float): smallest feature size to grid a shore
            point on.
        workspace_dir (string): path to a directory that can be created
            during run to hold temporary files.  Will be deleted on successful
            function completion.
        target_shore_point_vector_path (string): path to a point vector that
            will be created and contain points on the shore of the landmass.

    Returns:
        None.

    """
    # LOGGER.info("Creating shore points for grid %s", grid_fid)
    # create the spatial reference from the base vector
    aoi_vector_info = pygeoprocessing.get_vector_info(aoi_vector_path)
    aoi_spatial_reference = osr.SpatialReference()
    aoi_spatial_reference.ImportFromWkt(aoi_vector_info['projection'])
    aoi_bounding_box = aoi_vector_info['bounding_box']
    wwiii_spatial_reference = osr.SpatialReference()
    wwiii_spatial_reference.ImportFromWkt(
        pygeoprocessing.get_vector_info(wwiii_vector_path)['projection'])

    grid_raster_path = os.path.join(workspace_dir, 'grid.tif')
    convolution_raster_path = os.path.join(
        workspace_dir, 'convolution.tif')
    masked_convolution_raster_path = os.path.join(
        workspace_dir, 'masked_convolution.tif')
    shore_kernel_path = os.path.join(
        workspace_dir, 'shore_kernel.tif')
    shore_raster_path = os.path.join(
        workspace_dir, 'shore_raster.tif')

    esri_shapefile_driver = gdal.GetDriverByName("ESRI Shapefile")

    # this will hold the output sample points on the shore
    target_shore_point_vector = esri_shapefile_driver.Create(
        target_shore_point_vector_path, 0, 0, 0, gdal.GDT_Unknown)
    target_shore_point_layer = target_shore_point_vector.CreateLayer(
        os.path.basename(os.path.splitext(target_shore_point_vector_path)[0]),
        aoi_spatial_reference, ogr.wkbPoint)

    wwiii_vector = gdal.OpenEx(wwiii_vector_path, gdal.OF_VECTOR)
    wwiii_layer = wwiii_vector.GetLayer()
    wwiii_defn = wwiii_layer.GetLayerDefn()
    field_names = []
    for field_index in range(wwiii_defn.GetFieldCount()):
        field_defn = wwiii_defn.GetFieldDefn(field_index)
        field_name = field_defn.GetName()
        if field_name in ['I', 'J']:
            continue
        field_names.append(field_name)
        target_shore_point_layer.CreateField(field_defn)
    target_shore_point_defn = target_shore_point_layer.GetLayerDefn()

    byte_nodata = 255
    # Create a raster from the AOI extent, plus one pixel in all directions
    # add a pixel buffer so we clip land that's a little outside the grid
    pixel_buffer = 1
    aoi_bounding_box[0] -= pixel_buffer * smallest_feature_size
    aoi_bounding_box[1] -= pixel_buffer * smallest_feature_size
    aoi_bounding_box[2] += pixel_buffer * smallest_feature_size
    aoi_bounding_box[3] += pixel_buffer * smallest_feature_size

    # round up on the rows and cols so that the target raster encloses the
    # base vector
    target_pixel_size = (
        smallest_feature_size / 2.0, -smallest_feature_size / 2.0)  # TODO: why divide by 2?
    n_cols = int(numpy.ceil(
        abs((aoi_bounding_box[2] - aoi_bounding_box[0]) / target_pixel_size[0])))
    n_rows = int(numpy.ceil(
        abs((aoi_bounding_box[3] - aoi_bounding_box[1]) / target_pixel_size[1])))

    driver = gdal.GetDriverByName('GTiff')
    n_bands = 1
    raster = driver.Create(
        grid_raster_path, n_cols, n_rows, n_bands, gdal.GDT_Byte)
    raster.GetRasterBand(1).SetNoDataValue(byte_nodata)

    # Set the transform based on the upper left corner and given pixel
    # dimensions
    x_source = aoi_bounding_box[0]
    y_source = aoi_bounding_box[3]
    raster_transform = [
        x_source, target_pixel_size[0], 0.0,
        y_source, 0.0, target_pixel_size[1]]
    raster.SetGeoTransform(raster_transform)
    raster.SetProjection(aoi_spatial_reference.ExportToWkt())

    # Initialize everything to 0
    band = raster.GetRasterBand(1)
    band.Fill(0)
    band.FlushCache()
    band = None
    raster = None

    # rasterize landmass to grid
    pygeoprocessing.rasterize(
        landmass_vector_path, grid_raster_path, [1], None)

    # grid shoreline from raster
    make_shore_kernel(shore_kernel_path)
    pygeoprocessing.convolve_2d(
        (grid_raster_path, 1), (shore_kernel_path, 1),
        convolution_raster_path, target_datatype=gdal.GDT_Byte,
        target_nodata=255)

    pygeoprocessing.mask_raster(
        (convolution_raster_path, 1), aoi_vector_path,
        masked_convolution_raster_path, all_touched=False)

    temp_grid_nodata = pygeoprocessing.get_raster_info(
        grid_raster_path)['nodata'][0]

    def _shore_mask_op(shore_convolution):
        """Mask values on land that border water."""
        result = numpy.empty(shore_convolution.shape, dtype=numpy.uint8)
        result[:] = byte_nodata
        valid_mask = shore_convolution != temp_grid_nodata
        # If a pixel is on land, it gets at least a 9, but if it's all on
        # land it gets an 17 (8 neighboring pixels), so we search between 9
        # and 17 to determine a shore pixel
        result[valid_mask] = numpy.where(
            (shore_convolution[valid_mask] >= 9) &
            (shore_convolution[valid_mask] < 17), 1, byte_nodata)
        return result

    pygeoprocessing.raster_calculator(
        [(masked_convolution_raster_path, 1)], _shore_mask_op,
        shore_raster_path, gdal.GDT_Byte, byte_nodata)

    shore_geotransform = pygeoprocessing.get_raster_info(
        shore_raster_path)['geotransform']

    aoi_to_wwiii_transform = osr.CoordinateTransformation(
        aoi_spatial_reference, wwiii_spatial_reference)
    # rtree index loads without the extension
    wwiii_rtree_base_path = os.path.splitext(
        wwiii_rtree_path)[0]
    wwiii_rtree = rtree.index.Index(wwiii_rtree_base_path)
    wwiii_field_lookup = {}

    LOGGER.info("Interpolating shore points with Wave Watch III data")
    feature_lookup = {}
    for offset_info, data_block in pygeoprocessing.iterblocks(
            (shore_raster_path, 1)):
        row_indexes, col_indexes = numpy.mgrid[
            offset_info['yoff']:offset_info['yoff']+offset_info['win_ysize'],
            offset_info['xoff']:offset_info['xoff']+offset_info['win_xsize']]
        valid_mask = data_block == 1
        x_coordinates = (
            shore_geotransform[0] +
            shore_geotransform[1] * (col_indexes[valid_mask] + 0.5) +
            shore_geotransform[2] * (row_indexes[valid_mask] + 0.5))
        y_coordinates = (
            shore_geotransform[3] +
            shore_geotransform[4] * (col_indexes[valid_mask] + 0.5) +
            shore_geotransform[5] * (row_indexes[valid_mask] + 0.5))

        for x_coord, y_coord in zip(x_coordinates, y_coordinates):
            # Set the point geometry in the native SRS
            shore_point_geometry = ogr.Geometry(ogr.wkbPoint)
            shore_point_geometry.AddPoint(x_coord, y_coord)
            shore_point_feature = ogr.Feature(target_shore_point_defn)
            shore_point_feature.SetGeometry(shore_point_geometry)
            
            # Then transform point to match the wwiii SRS to find nearest
            shore_point_geometry.Transform(aoi_to_wwiii_transform)
            # get the nearest wave watch III points from the shore point
            nearest_points = list(wwiii_rtree.nearest(
                (shore_point_geometry.GetX(),
                 shore_point_geometry.GetY(),
                 shore_point_geometry.GetX(),
                 shore_point_geometry.GetY()), 3))[0:3]

            # create placeholders for point geometry and field values
            wwiii_points = numpy.empty((3, 2))
            wwiii_values = numpy.empty((3, len(field_names)))
            for fid_index, fid in enumerate(nearest_points):
                wwiii_feature = wwiii_layer.GetFeature(fid)
                wwiii_geometry = wwiii_feature.GetGeometryRef()
                wwiii_points[fid_index] = numpy.array(
                    [wwiii_geometry.GetX(), wwiii_geometry.GetY()])
                try:
                    wwiii_values[fid_index] = wwiii_field_lookup[fid]
                except KeyError:
                    wwiii_field_lookup[fid] = numpy.array(
                        [float(wwiii_feature.GetField(field_name))
                         for field_name in field_names])
                    wwiii_values[fid_index] = wwiii_field_lookup[fid]
            # import pdb; pdb.set_trace()
            distance = numpy.linalg.norm(
                wwiii_points - numpy.array(
                    (shore_point_geometry.GetX(),
                     shore_point_geometry.GetY())))

            # make sure we're within a valid data distance
            if distance > _MAX_WWIII_DISTANCE:
                continue

            wwiii_values *= distance
            wwiii_values = numpy.mean(wwiii_values, axis=0)
            wwiii_values /= numpy.sum(distance)

            for field_name_index, field_name in enumerate(field_names):
                shore_point_feature.SetField(
                    field_name, wwiii_values[field_name_index])

            target_shore_point_layer.CreateFeature(shore_point_feature)
            shore_point_feature = None
    del feature_lookup
    # LOGGER.info("All done with shore points for grid %s", grid_fid)


def calculate_wind_exposure(
        base_shore_point_vector_path,
        landmass_bounding_rtree_path, landmass_vector_path, workspace_dir,
        smallest_feature_size, max_fetch_distance,
        target_fetch_point_vector_path):
    """Calculate wind exposure for each shore point.

    Parameters:
        base_shore_point_vector_path (string): path to a point shapefile
            representing shore points that should be sampled for wind
            exposure.
        landmass_bounding_rtree_path (string): path to an rtree bounding box
            for the landmass polygons.
        landmass_vector_path (string): path to landmass polygon vetor.
        workspace_dir (string): path to a directory that can be created for
            temporary workspace files
        smallest_feature_size (float): smallest feature size to detect in
            meters.
        max_fetch_distance (float): maximum fetch distance for a ray in
            meters.
        target_fetch_point_vector_path (string): path to target point file,
            will be a copy of `base_shore_point_vector_path`'s geometry with
            an 'REI' (relative exposure index) field added.

    Returns:
        None

    """
    temp_fetch_rays_path = os.path.join(
        workspace_dir, 'fetch_rays.gpkg')

    # this should still match the user-defined SRS from the AOI:
    base_ref_wkt = pygeoprocessing.get_vector_info(
        base_shore_point_vector_path)['projection']
    base_spatial_reference = osr.SpatialReference()
    base_spatial_reference.ImportFromWkt(base_ref_wkt)

    gpkg_driver = gdal.GetDriverByName('GPKG')
    # TODO (maybe): we don't need all the fields copied, but we do need some.
    base_shore_point_vector = gdal.OpenEx(base_shore_point_vector_path, gdal.OF_VECTOR)
    gpkg_driver.CreateCopy(
        target_fetch_point_vector_path, base_shore_point_vector)

    clipped_geometry_shapely_list = []
    temp_utm_clipped_vector = ogr.Open(landmass_vector_path)
    temp_utm_clipped_layer = temp_utm_clipped_vector.GetLayer()
    for tmp_utm_feature in temp_utm_clipped_layer:
        tmp_utm_geometry = tmp_utm_feature.GetGeometryRef()
        shapely_geometry = shapely.wkb.loads(
            tmp_utm_geometry.ExportToWkb())
        if shapely_geometry.is_valid:
            # TODO: if geom is invalid we are just skipping it?
            clipped_geometry_shapely_list.append(shapely_geometry)
        tmp_utm_geometry = None
    temp_utm_clipped_layer = None
    temp_utm_clipped_vector = None
    landmass_shapely = shapely.ops.cascaded_union(
        clipped_geometry_shapely_list)
    clipped_geometry_shapely_list = None

    # load land geometry into shapely object
    landmass_shapely_prep = shapely.prepared.prep(landmass_shapely)

    # explode landmass into lines for easy intersection
    temp_polygon_segements_path = os.path.join(
        workspace_dir, 'polygon_segments.gpkg')
    
    temp_polygon_segments_vector = gpkg_driver.Create(
        temp_polygon_segements_path, 0, 0, 0, gdal.GDT_Unknown)
    temp_polygon_segments_layer = (
        temp_polygon_segments_vector.CreateLayer(
            os.path.splitext(os.path.basename(landmass_vector_path))[0],
            base_spatial_reference, ogr.wkbLineString))
    temp_polygon_segments_defn = temp_polygon_segments_layer.GetLayerDefn()

    polygon_line_rtree = rtree.index.Index()
    polygon_line_index = []
    shapely_line_index = []
    line_id = 0
    for line in geometry_to_lines(landmass_shapely):
        segment_feature = ogr.Feature(temp_polygon_segments_defn)
        segement_geometry = ogr.Geometry(ogr.wkbLineString)
        segement_geometry.AddPoint(*line.coords[0])
        segement_geometry.AddPoint(*line.coords[1])
        segment_feature.SetGeometry(segement_geometry)
        temp_polygon_segments_layer.CreateFeature(segment_feature)

        if (line.bounds[0] == line.bounds[2] and
                line.bounds[1] == line.bounds[3]):
            continue
        polygon_line_rtree.insert(line_id, line.bounds)
        line_id += 1
        polygon_line_index.append(segement_geometry)
        shapely_line_index.append(shapely.wkb.loads(
            segement_geometry.ExportToWkb()))

    temp_polygon_segments_layer.SyncToDisk()
    temp_polygon_segments_layer = None
    temp_polygon_segments_vector = None

    # create fetch rays
    temp_fetch_rays_vector = gpkg_driver.Create(
        temp_fetch_rays_path, 0, 0, 0, gdal.GDT_Unknown)
    temp_fetch_rays_layer = (
        temp_fetch_rays_vector.CreateLayer(
            os.path.splitext(os.path.basename(temp_fetch_rays_path))[0],
            base_spatial_reference, ogr.wkbLineString))
    temp_fetch_rays_defn = temp_fetch_rays_layer.GetLayerDefn()
    temp_fetch_rays_layer.CreateField(ogr.FieldDefn(
        'fetch_dist', ogr.OFTReal))

    target_shore_point_vector = gdal.OpenEx(
        target_fetch_point_vector_path, gdal.OF_VECTOR | gdal.GA_Update)
    target_shore_point_layer = target_shore_point_vector.GetLayer()
    target_shore_point_layer.CreateField(
        ogr.FieldDefn('REI', ogr.OFTReal))
    for ray_index in range(_N_FETCH_RAYS):
        compass_degree = int(ray_index * 360 / 16.)
        target_shore_point_layer.CreateField(
            ogr.FieldDefn('fdist_%d' % compass_degree, ogr.OFTReal))

    shore_point_logger = _make_logger_callback(
        "Wind exposure %.2f%% complete.", LOGGER)
    # Iterate over every shore point
    for shore_point_feature in target_shore_point_layer:
        shore_point_logger(
            float(shore_point_feature.GetFID()) /
            target_shore_point_layer.GetFeatureCount())
        rei_value = 0.0
        # Iterate over every ray direction
        for sample_index in range(_N_FETCH_RAYS):
            compass_degree = int(sample_index * 360 / 16.)
            compass_theta = float(sample_index) / _N_FETCH_RAYS * 360
            rei_pct = shore_point_feature.GetField(
                'REI_PCT%d' % int(compass_theta))
            rei_v = shore_point_feature.GetField(
                'REI_V%d' % int(compass_theta))
            cartesian_theta = -(compass_theta - 90)

            # Determine the direction the ray will point
            delta_x = math.cos(cartesian_theta * math.pi / 180)
            delta_y = math.sin(cartesian_theta * math.pi / 180)

            shore_point_geometry = shore_point_feature.GetGeometryRef()
            point_a_x = (
                shore_point_geometry.GetX() + delta_x * smallest_feature_size)
            point_a_y = (
                shore_point_geometry.GetY() + delta_y * smallest_feature_size)
            point_b_x = point_a_x + delta_x * (
                max_fetch_distance - smallest_feature_size)
            point_b_y = point_a_y + delta_y * (
                max_fetch_distance - smallest_feature_size)
            shore_point_geometry = None

            # build ray geometry so we can intersect it later
            ray_geometry = ogr.Geometry(ogr.wkbLineString)
            ray_geometry.AddPoint(point_a_x, point_a_y)
            ray_geometry.AddPoint(point_b_x, point_b_y)

            # keep a shapely version of the ray so we can do fast intersection
            # with it and the entire landmass
            ray_point_origin_shapely = shapely.geometry.Point(
                point_a_x, point_a_y)

            ray_length = 0.0
            if not landmass_shapely_prep.intersects(
                    ray_point_origin_shapely):
                # the origin is in ocean

                # This algorithm searches for intersections, if one is found
                # the ray updates and a smaller intersection set is determined
                # by experimentation I've found this is significant, but not
                # an order of magnitude, faster than looping through all
                # original possible intersections.  Since this algorithm
                # will be run for a long time, it's worth the additional
                # complexity
                tested_indexes = set()
                while True:
                    intersection = False
                    ray_envelope = ray_geometry.GetEnvelope()
                    for poly_line_index in polygon_line_rtree.intersection(
                            [ray_envelope[i] for i in [0, 2, 1, 3]]):
                        if poly_line_index in tested_indexes:
                            continue
                        tested_indexes.add(poly_line_index)
                        line_segment = (
                            polygon_line_index[poly_line_index])
                        if ray_geometry.Intersects(line_segment):
                            # if the ray intersects the poly line, test if
                            # the intersection is closer than any known
                            # intersection so far
                            intersection_point = ray_geometry.Intersection(
                                line_segment)
                            # offset the dist with smallest_feature_size
                            # update the endpoint of the ray
                            ray_geometry = ogr.Geometry(ogr.wkbLineString)
                            ray_geometry.AddPoint(point_a_x, point_a_y)
                            ray_geometry.AddPoint(
                                intersection_point.GetX(),
                                intersection_point.GetY())
                            intersection = True
                            break
                    if not intersection:
                        break
                # when we get here `min_point` and `ray_length` are the
                # minimum intersection points for the ray and the landmass
                ray_feature = ogr.Feature(temp_fetch_rays_defn)
                ray_length = ray_geometry.Length()
                ray_feature.SetField('fetch_dist', ray_length)
                ray_feature.SetGeometry(ray_geometry)
                temp_fetch_rays_layer.CreateFeature(ray_feature)
            shore_point_feature.SetField(
                'fdist_%d' % compass_degree, ray_length)
            ray_feature = None
            ray_geometry = None
            rei_value += ray_length * rei_pct * rei_v
        shore_point_feature.SetField('REI', rei_value)
        target_shore_point_layer.SetFeature(shore_point_feature)

    target_shore_point_layer.SyncToDisk()
    target_shore_point_layer = None
    target_shore_point_vector = None
    temp_fetch_rays_layer.SyncToDisk()
    temp_fetch_rays_layer = None
    temp_fetch_rays_vector = None


def build_wwiii_rtree(wwiii_vector_path, wwiii_rtree_path):
    """Build RTree indexed by FID for points in `wwwiii_vector_path`."""
    base_wwiii_rtree_path = os.path.splitext(wwiii_rtree_path)[0]
    if os.path.exists(wwiii_rtree_path):
        for ext in ['.dat', '.idx']:
            os.remove(base_wwiii_rtree_path+ext)
    wwiii_rtree = rtree.index.Index(base_wwiii_rtree_path)

    wwiii_vector = gdal.OpenEx(wwiii_vector_path, gdal.OF_VECTOR)
    wwiii_layer = wwiii_vector.GetLayer()
    for wwiii_feature in wwiii_layer:
        wwiii_geometry = wwiii_feature.GetGeometryRef()
        wwiii_x = wwiii_geometry.GetX()
        wwiii_y = wwiii_geometry.GetY()
        wwiii_rtree.insert(
            wwiii_feature.GetFID(), (wwiii_x, wwiii_y, wwiii_x, wwiii_y))
    wwiii_layer = None
    wwiii_vector = None


def build_feature_bounding_box_rtree(vector_path, target_rtree_path):
    """Build an r-tree index of the global feature envelopes.

    Parameter:
        vector_path (string): path to vector to build bounding box index for
        target_rtree_path (string): path to ".dat" file to store the saved
            r-tree.  A ValueError is raised if this file already exists

    Returns:
        None.

    """
    # the input path has a .dat extension, but the `rtree` package only uses
    # the basename.  It's a quirk of the library, so we'll deal with it by
    # cutting off the extension.
    global_feature_index_base = os.path.splitext(
        target_rtree_path)[0]
    LOGGER.info("Building rtree index at %s", global_feature_index_base)
    if os.path.exists(target_rtree_path):
        for ext in ['.dat', '.idx']:
            os.remove(global_feature_index_base + ext)
    global_feature_index = rtree.index.Index(global_feature_index_base)

    global_vector = gdal.OpenEx(vector_path, gdal.OF_VECTOR)
    global_layer = global_vector.GetLayer()
    n_features = global_layer.GetFeatureCount()

    logger_callback = _make_logger_callback(
        'rTree construction %.2f%% complete', LOGGER)

    for feature_index, global_feature in enumerate(global_layer):
        feature_geometry = global_feature.GetGeometryRef()
        # format of envelope is [minx, maxx, miny, maxy]
        feature_envelope = feature_geometry.GetEnvelope()
        # format of tree bounding box is [minx, miny, maxx, maxy]
        global_feature_index.insert(
            global_feature.GetFID(), (
                feature_envelope[0], feature_envelope[2],
                feature_envelope[1], feature_envelope[3]))
        logger_callback(float(feature_index) / n_features)
    global_feature_index.close()


def make_shore_kernel(kernel_path):
    """Make a 3x3 raster with a 9 in the middle and 1s on the outside."""
    driver = gdal.GetDriverByName('GTiff')
    kernel_raster = driver.Create(
        kernel_path.encode('utf-8'), 3, 3, 1,
        gdal.GDT_Byte)

    # Make some kind of geotransform, it doesn't matter what but
    # will make GIS libraries behave better if it's all defined
    kernel_raster.SetGeoTransform([0, 1, 0, 0, 0, -1])
    srs = osr.SpatialReference()
    srs.SetWellKnownGeogCS('WGS84')
    kernel_raster.SetProjection(srs.ExportToWkt())

    kernel_band = kernel_raster.GetRasterBand(1)
    kernel_band.SetNoDataValue(127)
    kernel_band.WriteArray(numpy.array([[1, 1, 1], [1, 9, 1], [1, 1, 1]]))

def geometry_to_lines(geometry):
    """Convert a geometry object to a list of lines."""
    if geometry.type == 'Polygon':
        return polygon_to_lines(geometry)
    elif geometry.type == 'MultiPolygon':
        line_list = []
        for geom in geometry.geoms:
            line_list.extend(geometry_to_lines(geom))
        return line_list
    else:
        return []


def polygon_to_lines(geometry):
    """Return a list of shapely lines given higher order shapely geometry."""
    line_list = []
    last_point = geometry.exterior.coords[0]
    for point in geometry.exterior.coords[1::]:
        if point == last_point:
            continue
        line_list.append(shapely.geometry.LineString([last_point, point]))
        last_point = point
    line_list.append(shapely.geometry.LineString([
        last_point, geometry.exterior.coords[0]]))
    for interior in geometry.interiors:
        last_point = interior.coords[0]
        for point in interior.coords[1::]:
            if point == last_point:
                continue
            line_list.append(shapely.geometry.LineString([last_point, point]))
            last_point = point
        line_list.append(shapely.geometry.LineString([
            last_point, interior.coords[0]]))
    return line_list


def _make_logger_callback(message, logger):
    """Build a timed logger callback that prints `message` replaced.

    Parameters:
        message (string): a string that expects a %f replacement variable for
            `proportion_complete`.

    Returns:
        Function with signature:
            logger_callback(proportion_complete, psz_message, p_progress_arg)

    """
    def logger_callback(proportion_complete):
        """Argument names come from the GDAL API for callbacks."""
        try:
            current_time = time.time()
            if ((current_time - logger_callback.last_time) > 5.0 or
                    (proportion_complete == 1.0 and
                     logger_callback.total_time >= 5.0)):
                LOGGER.info(message, proportion_complete * 100)
                logger_callback.last_time = current_time
                logger_callback.total_time += current_time
        except AttributeError:
            logger_callback.last_time = time.time()
            logger_callback.total_time = 0.0

    return logger_callback
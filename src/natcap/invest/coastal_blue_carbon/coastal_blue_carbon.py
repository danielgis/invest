# -*- coding: utf-8 -*-
"""CBC Model Entry Point."""

import csv
import os
import pprint as pp

from natcap.invest.coastal_blue_carbon import io, model


def execute(args):
    """Entry point for Coastal Blue Carbon model.

    :param str args['workspace_dir']: location into which all intermediate and
        output files should be placed.

    :param str args['results_suffix']: a string to append to output filenames.

    :param str args['lulc_lookup_uri']: filepath to a CSV table used to convert
        the lulc code to a name. Also used to determine if a given lulc type is
        a coastal blue carbon habitat.

    :param str args['lulc_transition_uri']: generated by the preprocessor. This
        file must be edited before it can be used by the main model. The
        left-most column represents the source lulc class, and the top row
        represents the destination lulc class.

    :param list args['lulc_snapshot_list']: a set of GDAL-supported rasters
        representing the landscape/seascape at particular points in time.
        Provided in chronological order.

    :param list args['lulc_snapshot_years_list']: a set of years that respectively
        correspond to transition years and final analysis year of the rasters.
        Provided in chronological order.

    :param str args['carbon_pool_initial_uri']: rhe provided CSV table contains
        information related to the initial conditions of the carbon stock within
        each of the three pools of a habitat. Biomass includes carbon stored
        above and below ground. All non-coastal blue carbon habitat lulc
        classes are assumed to contain no carbon. The values for 'biomass',
        'soil', and 'litter' should be given in terms of Megatonnes CO2 e/ ha.

    :param str args['carbon_pool_transient_uri']: rhe provided CSV table
        contains information related to the transition of carbon into and out
        of coastal blue carbon pools. All non-coastal blue carbon habitat lulc
        classes are assumed to neither sequester nor emit carbon as a result of
        change. The ‘yearly_accumulation’ values should be given in terms of
        Megatonnes of CO2 e/ha-yr. The ‘half-life’ values must be given in terms
        of years. The ‘disturbance’ values must be given as a decimal percentage
        of stock distrubed given a transition occurs away from a lulc-class.

    :param bool args['do_economic_analysis']: boolean value indicating whether
        model should run economic analysis.

    :param bool args['do_price_table']: boolean value indicating whether a price
        table is included in the arguments and to be used or a price and
        interest rate is provided and to be used instead.

    :param float args['price']: the price per Megatonne CO2 e at the base year.

    :param float args['interest_rate']: the interest rate on the price per
        Megatonne CO2 e, compounded yearly.

    :param bool args['price_table_uri']: can be used in place of price and
        interest rate inputs. The provided CSV table contains the price per
        Megatonne CO2e sequestered for a given year, for all years from the
        original snapshot to the analysis year, if provided.

    :param bool args['discount_rate']: the discount rate on future valuations of
        sequestered carbon, compounded yearly.

    Example Args::

        args = {
            'workspace_dir': 'path/to/workspace/',
            'results_suffix': '',
            'lulc_lookup_uri': 'path/to/lulc_lookup_uri',
            'lulc_transition_uri': 'path/to/lulc_transition_uri',
            'lulc_snapshot_list': [raster1_uri, raster2_uri, ...],
            'lulc_snapshot_years_list': [2000, 2005, ...],
            'analysis_year': 2100,
            'carbon_pool_initial_uri': 'path/to/carbon_pool_initial_uri',
            'carbon_pool_transient_uri': 'path/to/carbon_pool_transient_uri',
            'do_economic_analysis': '<boolean>',
            'do_price_table': '<boolean>',
            'price': '<float>',
            'interest_rate': '<float>',
            'price_table_uri': 'path/to/price_table',
            'discount_rate': '<float>'
        }
    """
    model.run(io.get_inputs(args))
